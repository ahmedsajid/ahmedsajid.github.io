[{"content":"The most popular IaC tool at this point is HashiCorp\u0026rsquo;s Terraform. However during my usual internet browsing, I found another Infrastructure-as-Code tool Pulumi. Its been around for years at this point but I only discovered it very recently.\nPulumi achieves the same thing, Infrastructure-as-Code. However, it uses a different approach. Instead of having to write Terraform HCL files, you can use your favorite programming language such as Python or Go to write code for your infrastructure. This means you no longer have to stitch together different piece of custom written code for different set of tools to manage your platform. You can pick any of the supported Pulumi language and use it to a full end-to-end automation for your platform.\nAfter reading such great things about Pulumi, I wanted to try out Pulumi and really find out the actual benefits of using it.\nSo I wrote a simple Python Flask application Droplet Deployer which uses Pulumi in the background to make deploying and Droplets on DigitalOcean Cloud as simple as a single curl command.\ncurl -H 'Content-Type: application/json' -d '{\u0026quot;name\u0026quot;: \u0026quot;\u0026lt;droplet_name\u0026gt;\u0026quot;}' 127.0.0.1:1337/add As you might have realized by now, the applications of Pulumi are endless.\nYou can use it to write a self-serving portal for your developers that can deploy infrastructure for their use. Pulumi can be hidden deep within your SaaS providing letting your customers deploy your software on a cloud somewhere with a click of a button. Tools can be written using Pulumi embedded within your CI/CD pipelines to manage your code deployments. and the list goes on.\nFor projects at the start out their IaC journey, I would recommend going with Pulumi from the get-go. It takes away the need to learn custom syntax which makes it trivial developers to adopt and get infrastructure deploying within minutes.\n","permalink":"https://ahmedsajid.github.io/posts/deploy-virtual-server-using-curl/","summary":"The most popular IaC tool at this point is HashiCorp\u0026rsquo;s Terraform. However during my usual internet browsing, I found another Infrastructure-as-Code tool Pulumi. Its been around for years at this point but I only discovered it very recently.\nPulumi achieves the same thing, Infrastructure-as-Code. However, it uses a different approach. Instead of having to write Terraform HCL files, you can use your favorite programming language such as Python or Go to write code for your infrastructure.","title":"Deploy Virtual Servers using cURL"},{"content":"While working on home server automation, I came across the awesome Open Source project healthchecks.\nI had been looking for a simple way to monitoring my Ansible home automation setup that is triggered via cron and send me alerts if my home automation takes longer than a set interval or just fails.\nhealthchecks.io, the service for healthchecks project, is an extremely simple dashboard for setting up monitoring. It also has integration with alerting systems as well as commonly used communication tools such as Teams, Slack, Signal and numerous others.\nFrom project\u0026rsquo;s website:\n Healthchecks.io works as a dead man\u0026rsquo;s switch for processes that need to run continuously or on a regular, known schedule.\n That means if the results are received within given amount of time at regular intervals, the check is considered healthy, if not the check has failed.\nResults can be submitted using curl command embedded within your script.\n# Add at the end of your script # check-uuid - custom uuid generated for your check curl https://hc-ping.com/check-uuid It also supports signals such as start to indicate start of script or a job and fail to indicate failure.\n# Beginning of your script curl https://hc-ping.com/check-uuid/start ################## # YOUR TASKS HERE ################## # Towards the end of the script if [ $? -eq 0 ] then # Post success curl https://hc-ping.com/check-uuid else # Post failure curl https://hc-ping.com/check-uuid/fail fi A full range of supported API calls can be found here.\nhealthchecks.io also supports submitting logs which can then be part of the alert message.\nhealthchecks.io is trivial to setup and easy to management. Initial setup is extremely simple, it has great range of features and documentation is well written. Here\u0026rsquo;s a link to Ansible callback plugin that I\u0026rsquo;m using to integrate with healthchecks.io.\n","permalink":"https://ahmedsajid.github.io/posts/healthchecks.io/","summary":"While working on home server automation, I came across the awesome Open Source project healthchecks.\nI had been looking for a simple way to monitoring my Ansible home automation setup that is triggered via cron and send me alerts if my home automation takes longer than a set interval or just fails.\nhealthchecks.io, the service for healthchecks project, is an extremely simple dashboard for setting up monitoring. It also has integration with alerting systems as well as commonly used communication tools such as Teams, Slack, Signal and numerous others.","title":"Simple cron monitoring using healthchecks.io"},{"content":"I recently passed CKA and CKAD (yay me!).\nBeing that I\u0026rsquo;m very impatient and I couldn\u0026rsquo;t wait the 24 hours for my result. For people who haven\u0026rsquo;t attempted the Certified Kubernetes exams, there\u0026rsquo;s a 24 hour period between completing your exam and receiving the results.\nSo after I attempted CKAD (which came after CKA for me), I started inspecting the API calls. Users on Reddit pointed out that that exams are automatically marked and I wondered if there\u0026rsquo;s a way to figure out scores before 24 hour period.\nI started combing through API calls made on the LinuxFoundation Training Portal exam page using my browser\u0026rsquo;s developer tool Network tab. After spending some time on it, I couldn\u0026rsquo;t believe that score was right there being returned by the backend. I reckon, there\u0026rsquo;s a timer in frontend JavaScript to not display scores until the timer hits 0.\nIt was a GET call to endpoint below.\nhttps://lfx-bff.platform.linuxfoundation.org/api/faraday/reservations/active?exam=CKAD\u0026amp;email=mypersonal@email.com\u0026amp;name=Ahmed%2520Sajid\u0026amp;ldap_username=username\n","permalink":"https://ahmedsajid.github.io/posts/immediate-kubernetes-results/","summary":"I recently passed CKA and CKAD (yay me!).\nBeing that I\u0026rsquo;m very impatient and I couldn\u0026rsquo;t wait the 24 hours for my result. For people who haven\u0026rsquo;t attempted the Certified Kubernetes exams, there\u0026rsquo;s a 24 hour period between completing your exam and receiving the results.\nSo after I attempted CKAD (which came after CKA for me), I started inspecting the API calls. Users on Reddit pointed out that that exams are automatically marked and I wondered if there\u0026rsquo;s a way to figure out scores before 24 hour period.","title":"Immediate Kubernetes Certification Exam results"},{"content":"Page can\u0026rsquo;t be found.\nLatest content is on the homepage.\n","permalink":"https://ahmedsajid.github.io/404/","summary":"Page can\u0026rsquo;t be found.\nLatest content is on the homepage.","title":"Whoops! Page not found"}]